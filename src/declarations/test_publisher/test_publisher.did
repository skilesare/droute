type test_publisher = 
 service {
   __dRouteNotify: (DRouteEvent) -> (NotifyResponse);
   __dRouteSubValidate: (Principal, nat) -> (bool, blob, MerkleTreeWitness);
   test: () -> (variant {
                  fail: text;
                  success;
                });
   testSimpleNotify: () -> (variant {
                              fail: text;
                              success;
                            });
   testSubscribe: () -> (variant {
                           fail: text;
                           success;
                         });
 };
type Witness = 
 variant {
   "empty";
   fork: record {
           Witness;
           Witness;
         };
   labeled: record {
              Key;
              Witness;
            };
   leaf: Value;
   pruned: Hash;
 };
type Value = blob;
type TrixValue = 
 variant {
   Blob: blob;
   Bool: bool;
   Bytes: variant {
            frozen: vec nat8;
            thawed: vec nat8;
          };
   Class: vec Property;
   Empty;
   Float: float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Principal: principal;
   Text: text;
 };
type Result = 
 variant {
   err: ProcessError;
   ok: ChunkResponse;
 };
type PublishError = 
 record {
   code: nat;
   "text": text;
 };
type Property = 
 record {
   immutable: bool;
   name: text;
   value: TrixValue;
 };
type ProcessError = 
 record {
   code: nat;
   "text": text;
 };
type Principal = principal;
type NotifyResponse = 
 variant {
   err: PublishError;
   ok: bool;
 };
type MerkleTreeWitness = 
 variant {
   "empty";
   fork: record {
           Witness;
           Witness;
         };
   labeled: record {
              Key;
              Witness;
            };
   leaf: Value;
   pruned: Hash;
 };
type Key = blob;
type Hash__1 = nat32;
type Hash = blob;
type DataSource = 
 service {
   queryPipelinifyChunk: (ChunkRequest) -> (Result) query;
   requestPipelinifyChunk: (ChunkRequest) -> (Result);
 };
type DataConfig = 
 variant {
   dataIncluded: record {data: vec AddressedChunk;};
   internal;
   pull:
    record {
      data: opt vec AddressedChunk;
      mode: variant {
              pull;
              pullQuery;
            };
      sourceActor: opt DataSource;
      sourceIdentifier: opt Hash__1;
      totalChunks: opt nat32;
    };
   push;
 };
type DRouteEvent = 
 record {
   dRouteID: nat;
   dataConfig: DataConfig;
   eventType: text;
   source: principal;
   userID: nat;
 };
type ChunkResponse = 
 variant {
   chunk: vec AddressedChunk;
   eof: vec AddressedChunk;
   err: ProcessError;
   parallel: record {
               nat;
               nat;
               vec AddressedChunk;
             };
 };
type ChunkRequest = 
 record {
   chunkID: nat;
   event: opt text;
   sourceIdentifier: opt Hash__1;
 };
type AddressedChunk = 
 record {
   nat;
   nat;
   TrixValue;
 };
service : () -> test_publisher
