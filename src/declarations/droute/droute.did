type ValidSourceOptions = 
 variant {
   blacklist: vec principal;
   dynamic: record {canister: text;};
   whitelist: vec principal;
 };
type TrixValue = 
 variant {
   Array: variant {
            frozen: vec TrixValue;
            thawed: vec TrixValue;
          };
   Blob: blob;
   Bool: bool;
   Bytes: variant {
            frozen: vec nat8;
            thawed: vec nat8;
          };
   Class: vec Property__1;
   Empty;
   Float: float64;
   Floats: variant {
             frozen: vec float64;
             thawed: vec float64;
           };
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: variant {
           frozen: vec nat;
           thawed: vec nat;
         };
   Option: opt TrixValue;
   Principal: principal;
   Text: text;
 };
type SubscriptionThrottle = variant {notImplemented;};
type SubscriptionResponse = 
 record {
   subscriptionID: nat;
   userID: nat;
 };
type SubscriptionRequest = 
 record {
   destinationSet: vec principal;
   eventType: text;
   filter: opt SubscriptionFilter;
   throttle: opt SubscriptionThrottle;
   userID: nat;
 };
type SubscriptionFilter = variant {notImplemented;};
type Result__1 = 
 variant {
   err: ProcessError;
   ok: ChunkResponse;
 };
type Result_2 = 
 variant {
   err: PublishError;
   ok: ProcessQueueResponse;
 };
type Result_1 = 
 variant {
   err: PublishError__1;
   ok: PublishResponse;
 };
type Result = 
 variant {
   err: PublishError;
   ok: SubscriptionResponse;
 };
type ReadResponse = 
 variant {
   data:
    record {
      data: vec Entry;
      firstID: opt nat;
      firstMarker: opt nat;
      lastID: opt nat;
      lastMarker: opt nat;
    };
   notFound;
   pointer:
    record {
      canister: principal;
      lastID: nat;
      lastMarker: nat;
      maxID: opt nat;
      minID: opt nat;
      namespace: text;
    };
 };
type PublishStatus = 
 variant {
   delivered;
   recieved;
 };
type PublishResponse = 
 record {
   dRouteID: nat;
   publishCanister: Principal;
   status: PublishStatus;
   timeRecieved: int;
 };
type PublishError__1 = 
 record {
   code: nat;
   "text": text;
 };
type PublishError = 
 record {
   code: nat;
   "text": text;
 };
type Property__1 = 
 record {
   immutable: bool;
   name: text;
   value: TrixValue;
 };
type Property = 
 record {
   immutable: bool;
   name: text;
   value: CandyValue;
 };
type ProcessQueueResponse = 
 record {
   eventsProcessed: nat;
   queueLength: nat;
 };
type ProcessError = 
 record {
   code: nat;
   "text": text;
 };
type Principal = principal;
type Hash = nat32;
type EventRegistrationStable = 
 record {
   eventType: text;
   publishingCanisters: vec text;
   validSources: ValidSourceOptions;
 };
type EventPublishable = 
 record {
   dataConfig: DataConfig;
   eventType: text;
   userID: nat;
 };
type Entry = 
 record {
   data: AddressedChunkArray;
   marker: nat;
   primaryID: nat;
 };
type DataSource = 
 service {
   queryPipelinifyChunk: (ChunkRequest) -> (Result__1) query;
   requestPipelinifyChunk: (ChunkRequest) -> (Result__1);
 };
type DataConfig = 
 variant {
   dataIncluded: record {data: vec AddressedChunk;};
   internal;
   local: nat;
   pull:
    record {
      data: opt vec AddressedChunk;
      mode: variant {
              pull;
              pullQuery;
            };
      sourceActor: opt DataSource;
      sourceIdentifier: opt Hash;
      totalChunks: opt nat32;
    };
   push;
 };
type DRoute = 
 service {
   getEventRegistration: (text) -> (opt EventRegistrationStable);
   getProcessingLogs: (text) -> (ReadResponse);
   getProcessingLogsByIndex: (text, nat) -> (ReadResponse);
   getPublishingCanisters: (nat) -> (vec text);
   processQueue: () -> (Result_2);
   publish: (EventPublishable) -> (Result_1);
   subscribe: (SubscriptionRequest) -> (Result);
 };
type ChunkResponse = 
 variant {
   chunk: vec AddressedChunk;
   eof: vec AddressedChunk;
   err: ProcessError;
   parallel: record {
               nat;
               nat;
               vec AddressedChunk;
             };
 };
type ChunkRequest = 
 record {
   chunkID: nat;
   event: opt text;
   sourceIdentifier: opt Hash;
 };
type CandyValue = 
 variant {
   Array: variant {
            frozen: vec CandyValue;
            thawed: vec CandyValue;
          };
   Blob: blob;
   Bool: bool;
   Bytes: variant {
            frozen: vec nat8;
            thawed: vec nat8;
          };
   Class: vec Property;
   Empty;
   Float: float64;
   Floats: variant {
             frozen: vec float64;
             thawed: vec float64;
           };
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: variant {
           frozen: vec nat;
           thawed: vec nat;
         };
   Option: opt CandyValue;
   Principal: principal;
   Text: text;
 };
type AddressedChunk__1 = 
 record {
   nat;
   nat;
   TrixValue;
 };
type AddressedChunkArray = vec AddressedChunk__1;
type AddressedChunk = 
 record {
   nat;
   nat;
   CandyValue;
 };
service : () -> DRoute
