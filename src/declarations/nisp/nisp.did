type Witness = 
 variant {
   "empty";
   fork: record {
           Witness;
           Witness;
         };
   labeled: record {
              Key;
              Witness;
            };
   leaf: Value;
   pruned: Hash;
 };
type Value = blob;
type Result = 
 variant {
   err: PublishError;
   ok: GetStatusResponse;
 };
type PublishError = 
 record {
   code: nat;
   "text": text;
 };
type NIsp = 
 service {
   __resetTest: () -> (bool);
   getStatus: (opt vec text) -> (Result) query;
   updateCycles: (principal, nat) -> (bool);
 };
type Key = blob;
type Hash = blob;
type GetStatusResponse = 
 variant {
   cycleBalance: record {
                   nat;
                   Witness;
                 };
   notFound: Witness;
   pointer: record {
              principal;
              Witness;
            };
 };
service : () -> NIsp
